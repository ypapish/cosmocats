openapi: 3.0.3
info:
  title: Product API
  description: API for managing cosmic products in the intergalactic marketplace
  version: 1.0.0

paths:
  /api/v1/products:
    get:
      summary: Get all products
      tags: 
        - Products 
      responses:
        '200':
          description: List of all products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListDto'

  /api/v1/products/{id}:
    get:
      summary: Get product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/admin/products:
    post:
      summary: Create a new product
      tags:
        - Admin-Products
      requestBody:
        description: Product data to create a new product
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateDto'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: Product already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/admin/products/{id}:
    put:
      summary: Update product
      tags:
        - Admin-Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Product data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateDto'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete product
      tags:
        - Admin-Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product deleted successfully
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ProductDto:
      type: object
      required:
        - productId
        - category
        - name
        - price
      properties:
        productId:
          type: string
          format: uuid
          description: ID of the product
        category:
          type: string
          maxLength: 100
          description: Category of the product
        name:
          type: string
          maxLength: 100
          description: Name of the product
        description:
          type: string
          maxLength: 1000
          description: Description of the product
        price:
          type: number
          format: float
          minimum: 0.01
          description: Price of the product

    ProductUpdateDto:
      type: object
      required:
        - category
        - name
        - price
      properties:
        category:
          type: string
          maxLength: 100
          description: Category of the product
        name:
          type: string
          maxLength: 100
          description: Name of the product
        description:
          type: string
          maxLength: 1000
          description: Description of the product
        price:
          type: number
          format: float
          minimum: 0.01
          description: Price of the product

    ProductListDto:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductDto'

    ValidationError:
      type: object
      properties:
        status:
          type: string
          example: "400"
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ParamsViolationDetails'

    ErrorResponse:
    type: object
    properties:
      timestamp:
        type: string
        format: date-time
        description: Timestamp when the error occurred
      status:
        type: integer
        description: HTTP status code
      error:
        type: string
        description: A short description of the error
      message:
        type: string
        description: Detailed description of the error
      path:
        type: string
        description: API path where error occurred

    ParamsViolationDetails:
      type: object
      properties:
        fieldName:
          type: string
          description: Field where validation error occurred
        reason:
          type: string
          description: Reason for the validation error